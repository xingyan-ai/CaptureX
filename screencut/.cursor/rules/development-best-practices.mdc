# ScreenCut开发最佳实践

## 代码质量要求
为了确保插件的稳定性和可维护性，所有代码必须遵循以下标准：

### 注释规范
```javascript
/**
 * 函数功能描述 - 用简单的话解释这个函数做什么
 * @param {Object} bounds - 截图区域坐标 {x, y, width, height}
 * @param {number} ratio - 比例值 (1.75 或 2.35)
 * @returns {Promise<string>} - 返回base64格式的图片数据
 * 
 * 实现思路：
 * 1. 首先验证输入参数的有效性
 * 2. 使用html2canvas库捕获指定区域
 * 3. 处理高分辨率屏幕的像素比问题
 * 4. 返回PNG格式的base64数据
 */
async function captureScreenshot(bounds, ratio) {
  // 具体实现...
}
```

### 错误处理标准
```javascript
// 必须包含完整的错误处理
try {
  const result = await riskyOperation();
  return result;
} catch (error) {
  console.error('操作失败:', error.message);
  
  // 用户友好的错误提示
  showUserMessage('截图失败，请重试', 'error');
  
  // 可选：发送错误报告（如果有监控系统）
  reportError(error, { context: 'screenshot_capture' });
  
  throw new Error('截图操作失败');
}
```

## 性能优化要求

### 内存管理
- 及时清理DOM元素和事件监听器
- 避免内存泄漏，特别是闭包中的大对象引用
- 截图完成后立即释放Canvas对象

### 事件处理优化
```javascript
// 使用防抖处理频繁触发的事件
const debounce = (func, delay) => {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(null, args), delay);
  };
};

// 应用到窗口大小变化事件
const handleResize = debounce(() => {
  adjustOverlayPosition();
}, 100);
```

## 用户体验要求

### 响应式设计
- 确保在不同分辨率下都能正常工作
- 截图框不得超出页面边界
- 在移动设备上保持良好的触摸体验

### 加载状态反馈
```javascript
// 显示加载状态
const showLoading = (message = '正在截图...') => {
  const loader = document.createElement('div');
  loader.className = 'screencut-loader';
  loader.textContent = message;
  document.body.appendChild(loader);
};

// 隐藏加载状态
const hideLoading = () => {
  const loader = document.querySelector('.screencut-loader');
  if (loader) loader.remove();
};
```

## 安全要求

### 权限最小化原则
- 只请求必要的Chrome API权限
- 避免访问敏感用户数据
- 遵循同源策略，处理跨域内容

### 数据安全
- 截图数据仅在本地处理，不上传到服务器
- 用户取消操作时立即清理临时数据
- 避免在控制台输出敏感信息

## 兼容性要求

### 浏览器版本支持
- Chrome 88+ (Manifest V3最低要求)
- 检测并处理不支持的API

### 页面兼容性
```javascript
// 检测页面是否支持截图
const checkCompatibility = () => {
  if (!window.html2canvas) {
    throw new Error('html2canvas库未加载');
  }
  
  if (!navigator.clipboard) {
    console.warn('剪贴板API不支持，将禁用复制功能');
  }
  
  return true;
};
```

## 测试要求

### 单元测试覆盖
- 比例计算函数必须有测试覆盖
- 边界条件测试（最小/最大尺寸）
- 错误情况测试

### 手动测试检查清单
- [ ] 两种比例选择功能正常
- [ ] 截图框拖拽和缩放功能正常
- [ ] 下载和复制功能正常
- [ ] 不同网站上的兼容性测试
- [ ] 高分辨率屏幕测试
- [ ] 错误情况处理测试

## 代码组织要求

### 模块化结构
```javascript
// 使用ES6模块化组织代码
export class RatioCalculator {
  // 比例计算相关功能
}

export class ScreenshotOverlay {
  // 截图框UI相关功能
}

export class CaptureEngine {
  // 截图捕获核心功能
}
```

### 配置管理
```javascript
// 集中管理配置常量
const CONFIG = {
  DEFAULT_WIDTH: 400,
  MIN_WIDTH: 100,
  MAX_WIDTH: 2000,
  RATIOS: {
    BLOG: 1.75,
    WECHAT: 2.35
  },
  COLORS: {
    PRIMARY: '#3b82f6',
    OVERLAY: 'rgba(0, 0, 0, 0.3)'
  }
};
```

## 文档更新要求
- 每次功能更新后及时更新相关文档
- 保持README.md的开发进度同步
- 记录重要设计决策和原因
